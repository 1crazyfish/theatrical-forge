buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'com.wynprice.cursemaven:CurseMaven:1.2.+'
    }
}
configurations {
    shade
    compile.extendsFrom shade
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.wynprice.cursemaven'
apply plugin: 'java'
apply plugin: 'idea'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = "${mod_version}"
group = 'dev.imabad.theatrical'
archivesBaseName = "Theatrical-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
repositories {
    maven { url 'https://squiddev.cc/maven/' }
    maven { url 'https://repo.spongepowered.org/maven' }
    maven { // TOP
        name 'k-4u'
        url "https://maven.k-4u.nl/"
    }
    maven {
        name 'BGC Maven'
        url 'https://maven.blamejared.com'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            //Add the generated resources
            srcDirs += "$rootDir/src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


minecraft {
    mappings channel: 'official', version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    runs {
        client {
            workingDirectory project.file('run')
            source sourceSets.main
            properties 'mixin.env.disableRefMap': 'true'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')
            source sourceSets.main
            properties 'mixin.env.disableRefMap': 'true'
            property 'forge.logging.console.level', 'debug'
        }

        data {
            workingDirectory project.file('run')
            source sourceSets.main
            properties 'mixin.env.disableRefMap': 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'theatrical', '--all', '--output', file('src/generated/resources/'),
                    '--existing', sourceSets.main.resources.srcDirs[0]
        }
    }
}
configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    library files("libs/artnet4j-0.6.1.jar")
    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }
    implementation fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
    implementation fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:1.18.2-1.0.6-Snapshot.2")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "theatrical",
            "Specification-Vendor": "theatrical",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"theatrical",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
